Mini programms i did

(Прата гл. 7 зад. 6) программа, которая читает целые числа до тех пор, пока при вводе
не встретится О. Как только ввод прекратится , программа должна сообщить
общее количество четных чисел во входных данных (за исключением О ) , среднее
количество четных чисел, общее количество нечетных чисел во входных
данных и среднее значение нечетных чисел
{
    int num = 0,
            chet_ct = 0,
            nechet_ct = 0,
            summ_nechet = 0,
            summ_chet = 0;

        double sr_arif_chet = 0.0,
            sr_arif_nechet = 0.0;

        scanf("%d", &num);
        while (num != 0)
        {
            if (num % 2)
            {
                nechet_ct++;
                summ_nechet += num;
            }
            else
            {
                chet_ct++;
                summ_chet += num;
            }
            scanf("%d", &num);
        }
        sr_arif_chet = (chet_ct != 0) ? (summ_chet / double(chet_ct)) : 0;
        sr_arif_nechet = (nechet_ct != 0) ? (summ_nechet / double(nechet_ct)) : 0;

        printf("Count of even numbers is %d, its middle arifm is %.2lf\n", chet_ct, sr_arif_chet);
        printf("Count of odd numbers is %d, its middle arifm is %.2lf\n", nechet_ct, sr_arif_nechet);
}

(Прата гл. 7 зад. 9) Программа, которая в качестве входных данных принимает целое
число, а затем выводит на экран все простые числа, которые меньше или равны
введенному числу.
{
    int num = 0,
        count_delitel = 0;
    scanf("%d", &num);
    for (int i = 2; i <= num; i++)
    {
        for (int j = 1; j <= i; j++)
        {
            if (i % j == 0)
                count_delitel++;
        }
        if (count_delitel == 2)
            printf("%d ", i);
    count_delitel = 0;
    }
}
(Прата гл. 8 зад. 2) Напишите программу, которая воспринимает входные данные как поток символов
и читает их до тех пор, пока не встретит символ EOF. Заставьте программу распечатывать каждый входной символ и его десятичное значение. Обратите
внимание на то, что в последовательности ASCII символу пробела предшествуют
непечатаемые символы . Примените к ним специальную обработку. Если не·
печатаемым символом является символ новой строки или символ табуляции,
печатайте, соответственно, \ n или \ t. В противном случае, вос пользуйтесь для
обозначения символами управления . Например, ASCII 1 - это <Ctrl+A>, который
может отображаться как лА. Обратите внимание, что АSСII-значение для
символа А представляет собой значение <Ctrl+A> плюс 64. Аналогичное отно·
шение выполняется и для других непечатаемых символов. Печатайте по 10 пар
в строке , но начинайте печать с новой строки всякий раз, когда встречается
символ новой строки
{
    char ch;
    int i = 0;
    while ((ch = getchar()) != EOF)
    {
        if (i % 10 == 0 && i != 0)
            printf("\n");
        i++;
        switch (ch)
        {
            case '\n':
                printf("'\\n' - %d\n", int(ch));
                i = 0;
                continue;
        }
        printf("'%c' - %d ", ch, int(ch));
    }
}

Программа, считающая num-ое число Фибоначчи.
{
    unsigned long long int Fibonacci(int);

    int main(void)
    {
        int num = 0;
        unsigned long long int fibon = 0;
        printf("Which number of Fibonacci do you want to see? \n");
        scanf("%d", &num);
        fibon = Fibonacci(num);
        printf("%dth number of Fibonacci is %llu.\n", num, fibon);
        return 0;
    }

    unsigned long long int Fibonacci(int num)
    {
        unsigned long long int a = 1, b = 2, fib = 0;
        switch (num)
        {
            case 1:
                fib = 1;
                break;
            case 2:
                fib = 2;
                break;
        }
        for (int i = 3; i <= num; i++)
        {
            fib = a + b;
            if (i % 2)
                a = fib;
            else
                b = fib;
        }
        return fib;
    }
}
